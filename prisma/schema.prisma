// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  output     = "../src/generated/prisma"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tastings      Tasting[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Brewery {
  id      String @id @default(cuid())
  name    String @unique
  beers   Beer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Beer {
  id         String    @id @default(cuid())
  name       String
  photoUrl   String?
  brewery    Brewery   @relation(fields: [breweryId], references: [id])
  breweryId  String
  tastings   Tasting[]

  @@unique([name, breweryId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tasting {
  id              String @id @default(cuid())
  user            User   @relation(fields: [userId], references: [id])
  userId          String
  beer            Beer   @relation(fields: [beerId], references: [id])
  beerId          String

  // Campos descritivos
  appearance      String
  foam            String
  aroma           String
  flavor          String
  creaminess      String
  aftertaste      String
  drinkability    String
  dryFinish       String
  carbonation     String
  idealOccasion   String?
  imageUrl        String? // Campo para a URL da imagem

  // Notas de 0 a 10
  appearanceScore   Int
  foamScore         Int
  aromaScore        Int
  flavorScore       Int
  creaminessScore   Int
  aftertasteScore   Int
  drinkabilityScore Int
  dryFinishScore    Int
  carbonationScore  Int
  perceptionScore   Float
  finalScore        Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
